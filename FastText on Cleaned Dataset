{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10838804,"sourceType":"datasetVersion","datasetId":6730776},{"sourceId":10840724,"sourceType":"datasetVersion","datasetId":6732218}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:13.385015Z","iopub.execute_input":"2025-02-24T12:45:13.385467Z","iopub.status.idle":"2025-02-24T12:45:13.395463Z","shell.execute_reply.started":"2025-02-24T12:45:13.385433Z","shell.execute_reply":"2025-02-24T12:45:13.394504Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/parsed-data1/Combined_Basit_Labels.csv\n/kaggle/input/cleaned-parsed-data/cleaned_dataset.csv\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"import pandas as pd\nimport fasttext\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:25.069774Z","iopub.execute_input":"2025-02-24T12:45:25.070105Z","iopub.status.idle":"2025-02-24T12:45:25.074315Z","shell.execute_reply.started":"2025-02-24T12:45:25.070079Z","shell.execute_reply":"2025-02-24T12:45:25.073321Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"# Load dataset\ndf = pd.read_csv(\"/kaggle/input/cleaned-parsed-data/cleaned_dataset.csv\")  # Change to your actual dataset file","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:26.751023Z","iopub.execute_input":"2025-02-24T12:45:26.751422Z","iopub.status.idle":"2025-02-24T12:45:26.844614Z","shell.execute_reply.started":"2025-02-24T12:45:26.751388Z","shell.execute_reply":"2025-02-24T12:45:26.843584Z"}},"outputs":[],"execution_count":58},{"cell_type":"code","source":"# Drop null values\ndf.dropna(inplace=True)\n\n\n# Convert to lowercase\ndf[\"Category\"] = df[\"Category\"].str.lower()\ndf[\"URL\"] = df[\"URL\"].str.lower()\n# Remove \"www.\" and \"https://\"\ndf[\"URL\"] = df[\"URL\"].str.replace(r\"(https?://|www\\.)\", \"\", regex=True)\n# **Fix: Remove trailing dots from category labels**\ndf[\"Category\"] = df[\"Category\"].str.strip().str.rstrip(\".\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:28.720698Z","iopub.execute_input":"2025-02-24T12:45:28.721057Z","iopub.status.idle":"2025-02-24T12:45:28.846156Z","shell.execute_reply.started":"2025-02-24T12:45:28.721028Z","shell.execute_reply":"2025-02-24T12:45:28.845325Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"# Filter categories with count > 500\ncategory_counts = df[\"Category\"].value_counts()\nvalid_categories = category_counts[category_counts > 700].index\ndf = df[df[\"Category\"].isin(valid_categories)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:37.321692Z","iopub.execute_input":"2025-02-24T12:45:37.322065Z","iopub.status.idle":"2025-02-24T12:45:37.342263Z","shell.execute_reply.started":"2025-02-24T12:45:37.322029Z","shell.execute_reply":"2025-02-24T12:45:37.341310Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"# Split into train (80%) and validation (20%)\n\ntrain_df, valid_df = train_test_split(df, test_size=0.2, random_state=42, stratify=df[\"Category\"])\n\n# Convert to FastText format (__label__category URL)\ndef convert_to_fasttext_format(df, filename):\n    with open(filename, \"w\", encoding=\"utf-8\") as f:\n        for _, row in df.iterrows():\n            f.write(f\"__label__{row['Category']} {row['URL']}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:50.257349Z","iopub.execute_input":"2025-02-24T12:45:50.257724Z","iopub.status.idle":"2025-02-24T12:45:50.347328Z","shell.execute_reply.started":"2025-02-24T12:45:50.257694Z","shell.execute_reply":"2025-02-24T12:45:50.346152Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"convert_to_fasttext_format(train_df, \"train.txt\")\nconvert_to_fasttext_format(valid_df, \"valid.txt\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:52.447728Z","iopub.execute_input":"2025-02-24T12:45:52.448096Z","iopub.status.idle":"2025-02-24T12:45:55.633354Z","shell.execute_reply.started":"2025-02-24T12:45:52.448062Z","shell.execute_reply":"2025-02-24T12:45:55.632559Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"# Train FastText model with improved settings\nmodel = fasttext.train_supervised(\n    input=\"train.txt\",\n    lr=0.5,        # Higher learning rate\n    epoch=300,     # More training iterations\n    wordNgrams=4,  # More word combinations\n    dim=300,       # Higher embedding size\n    minCount=5,    # Ignore very rare words\n    minn=3, maxn=6,  # Better subword features\n    loss=\"softmax\",\n    verbose=2\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:45:59.302931Z","iopub.execute_input":"2025-02-24T12:45:59.303312Z","iopub.status.idle":"2025-02-24T12:53:48.292453Z","shell.execute_reply.started":"2025-02-24T12:45:59.303278Z","shell.execute_reply":"2025-02-24T12:53:48.291532Z"}},"outputs":[],"execution_count":65},{"cell_type":"code","source":"# Evaluate on validation set\nresult = model.test(\"valid.txt\")\nprint(f\"Validation Accuracy: {result[1]:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:54:05.239796Z","iopub.execute_input":"2025-02-24T12:54:05.240189Z","iopub.status.idle":"2025-02-24T12:54:05.844649Z","shell.execute_reply.started":"2025-02-24T12:54:05.240157Z","shell.execute_reply":"2025-02-24T12:54:05.843447Z"}},"outputs":[{"name":"stdout","text":"Validation Accuracy: 0.7302\n","output_type":"stream"}],"execution_count":66},{"cell_type":"code","source":"# Generate predictions for validation set\ntrue_labels = []\npred_labels = []\n\nwith open(\"valid.txt\", \"r\", encoding=\"utf-8\") as f:\n    for line in f:\n        label, url = line.split(\" \", 1)\n        true_labels.append(label.replace(\"__label__\", \"\"))\n        pred = model.predict(url.strip())[0][0].replace(\"__label__\", \"\")\n        pred_labels.append(pred)\n\n# Print classification report\nprint(\"\\nClassification Report:\\n\", classification_report(true_labels, pred_labels))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-24T12:54:11.649746Z","iopub.execute_input":"2025-02-24T12:54:11.650076Z","iopub.status.idle":"2025-02-24T12:54:12.541767Z","shell.execute_reply.started":"2025-02-24T12:54:11.650048Z","shell.execute_reply":"2025-02-24T12:54:12.540782Z"}},"outputs":[{"name":"stdout","text":"\nClassification Report:\n                precision    recall  f1-score   support\n\n      charity       1.00      1.00      1.00       363\n     commerce       0.57      0.67      0.62      2503\n    education       0.71      0.74      0.73      2015\nentertainment       0.50      0.42      0.46      1442\n   government       0.77      0.78      0.77      1456\n       health       0.57      0.44      0.50       641\n         news       0.54      0.48      0.51      1202\n       social       0.99      1.00      0.99       234\n        tools       1.00      1.00      1.00      3062\n\n     accuracy                           0.73     12918\n    macro avg       0.74      0.73      0.73     12918\n weighted avg       0.73      0.73      0.73     12918\n\n","output_type":"stream"}],"execution_count":67},{"cell_type":"code","source":"#Save model\nmodel.save_model(\"/kaggle/working/fasttext_url_classifier_optimized.ftz\")\n\n# Test with example\nloaded_model = fasttext.load_model(\"/kaggle/working/fasttext_url_classifier_optimized.ftz\")\nprint(loaded_model.predict(\"geonews.pk\"))  # Example prediction","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}